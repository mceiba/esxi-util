#!/usr/bin/env python
"""wrapper of vim-cmd for easy VM operation 
Usage: vm all					# show all VMs
       vm [state cz001|cz002|cz003]		# show state of VMs
       vm [poweron|poweroff|reboot] [vmid]	# operate VM, vmid can be got by running 'vm state [lab]' or 'vm all'
"""
__author__ = 'sanpingz (sanping.zhang@alcatel-lucent.com'

from common import *

def main():
	if len(sys.argv) < 2:
		print __doc__
		sys.exit()
	elif sys.argv[1] == 'all':
		print doit(r'vim-cmd vmsvc/getallvms')
	elif len(sys.argv) < 3:
		print __doc__
		sys.exit()
	elif sys.argv[1] == 'state':
		if sys.argv[2] not in LABs:
			print __doc__
			sys.exit()
		else:
			ch = chr(int(sys.argv[2][-1])+ord('a')-1)
			resp = doit("vim-cmd vmsvc/getallvms|awk '{print $1\" \"$2}'|awk '/^.+disk+[full|less]+_%s/{print $1\"=>\"$2}'" % ch)
			if resp:
				resp = resp.strip()
				print "%2s%-10s%-20s%-20s" % ('', 'Vmid', 'Name', 'State')
				for line in resp.split():
					id, name = line.split('=>')
					state = getstate(id)
					print "%2s%-10s%-20s%-20s" % ('', id, name, state)
	elif sys.argv[1] == 'poweron':
		id = sys.argv[2]
		if not str(id).isdigit():
			print __doc__
			sys.exit()
		print doit(r'vim-cmd vmsvc/power.on %s' % id)
	elif sys.argv[1] == 'poweroff':
		id = sys.argv[2]
		if not str(id).isdigit():
			print __doc__
		        sys.exit()
		print doit(r'vim-cmd vmsvc/power.off %s' % id)
	elif sys.argv[1] == 'reboot':
		id = sys.argv[2]
	        if not str(id).isdigit():
	        	print __doc__
	                sys.exit()
	        #print doit(r'vim-cmd vmsvc/power.reboot %s' % id)
	        print doit(r'vim-cmd vmsvc/power.off %s && vim-cmd vmsvc/power.on %s' % (id, id))
	elif sys.argv[1] == 'shutdown':
		raise Exception('Not support now')
		id = sys.argv[2]
	        if not str(id).isdigit():
	        	print __doc__
	                sys.exit()
	        print doit(r'vim-cmd vmsvc/power.shutdown %s' % id)
	else:
		print __doc__

if __name__ == '__main__':
	main()
